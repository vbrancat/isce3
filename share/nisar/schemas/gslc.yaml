runconfig:
    name: str()

    groups:
        pge_name_group:
            pge_name: enum('GSLC_L_PGE')

        input_file_group:
            # REQUIRED - One NISAR L1B RSLC formatted HDF5 file
            input_file_path: str()

            # REQUIRED for QA. NOT REQUIRED if only running Product SAS.
            # If Product SAS and QA SAS are run back-to-back,
            # this field should be identical to `sas_output_file`.
            # Otherwise, this field is the filename of the single
            # NISAR product for QA to process.
            qa_input_file: str(required=False)

        dynamic_ancillary_file_group:
            # REQUIRED - Digital elevation model
            dem_file: str()

            # OPTIONAL - Digital elevation model file description, optional
            dem_file_description: str(required=False)

            # External orbit file
            orbit_file: str(required=False)

            # TEC file used for geolocation correction. If no file present, no
            # TEC correction is applied
            tec_file: str(required=False)

            # List of GSLCs from previous cycles.
            # Data driven GSLC will be activated when this field has a valid value.
            # In this case the model driven corrections will be applied first, and
            # the residual relative geolocation error will be estimated with
            # data driven approch.
            # When refernce_gslc is empty, only the model driven correction will be applied.
            reference_gslc: list(str(), min=1, required=False)

            corner_reflector_file: str(required=False)

        product_path_group:
            # Directory where PGE will place results
            product_path: str()
            # Product Counter
            product_counter: int(min=1, max=999, required=False)

            # Directory where SAS can write temporary data
            scratch_path: str()

            # Intermediate file name.  SAS writes output product to the following file.
            # After the SAS completes, the PGE wrapper renames the product file
            # according to proper file naming conventions.
            sas_output_file: str()

            # REQUIRED for QA. NOT REQUIRED if only running Product SAS.
            # Output directory to store all QA output files.
            # Defaults to './qa'
            qa_output_dir: str(required=False)

        primary_executable:
            product_type: enum('GSLC')
            product_version: str('^\d+\.\d+\.\d+$', required=False)
            product_doi: str(required=False)
            composite_release_id: regex(r'\w\d\d\d\d\d', name='CRID', required=False)
            processing_type: enum('PR', 'UR', required=False)
            product_accuracy: enum('P', 'M', 'N', 'F', required=False)
            urgent_request_id: list(str(), required=False)
            processing_center: str(required=False)
            data_source: enum('A', 'M', required=False)
            partial_granule_id: str(required=False)

        debug_level_group:
            debug_switch: bool()

        #adt section - isce3 + pyre workflow
        processing:
            # Mechanism to select frequencies and polarizations
            input_subset: include('input_subset_options', required=False)

            # DEM download options: checked only if internet access is available
            dem_download: include('dem_download_options', required=False)

            # Pre-processing (before geocoding) options
            pre_process: include('pre_process_options', required=False)

            # Mechanism to specify output posting and DEM
            geocode: include('geocode_options', required=False)

            # Radar grids cube options
            radar_grid_cubes:  include('radar_grid_cubes_options', required=False)

            # Calibration information options
            calibration_information: include('calibration_information_options', required=False)

            # Processing information options
            processing_information: include('processing_information_options', required=False)

            # Geo2rdr options
            geo2rdr: include('geo2rdr_options', required=False)

            ampcor: include('ampcor_options', required=False)

            blocksize:
                x: int(min=100, max=100000)
                y: int(min=100, max=10000)

            flatten: bool()

            # Options to generate model-based slant range and azimuth correction LUTs
            correction_luts: include('lut_options', required=False)

        # Output options for GSLC raster (e.g. compression, chunking, shuffle filter)
        output: include('output_options', required=False)

        # Group containing CEOS Analysis Ready Data (CARD) parameters
        # to populate the output product's metadata
        ceos_analysis_ready_data: include('ceos_analysis_ready_data_options', required=False)

        # Worker options (e.g. enable/disable GPU processing, select GPU device ID)
        worker: include('worker_options', required=False)

        # Quality Assurance software options
        qa: include('qa_options', required=False)

        # Logging options. If path to log file is not set, log is sent to screen
        logging: include('logging_options', required=False)

---
input_subset_options:
    # List of frequencies to process. Default empty representing all
    list_of_frequencies: include('list_of_frequencies_options', required=False)

list_of_frequencies_options:
    # List of polarization channels to process. Default empty representing all
    A: any(list(str(min=2, max=2), min=1, max=4), str(min=2, max=2), null(), required=False)
    B: any(list(str(min=2, max=2), min=1, max=4), str(min=2, max=2), null(), required=False)

radar_grid_cubes_options:

    # List of heights in meters
    heights: list(num(), required=False)

    # Same as input DEM if not provided.
    output_epsg: int(min=1024, max=32767, required=False)

    # Output posting in same units as output EPSG.
    # If not provided, spacing values will be taken from provided DEM.
    output_posting:
        x_posting: num(min=0, required=False)
        y_posting: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    x_snap: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    y_snap: num(min=0, required=False)

    top_left:
        # Set top-left y in same units as output EPSG
        y_abs: num(required=False)

        # Set top-left x in same units as output EPSG
        x_abs: num(required=False)

    bottom_right:
        # Set bottom-right y in same units as output EPSG
        y_abs: num(required=False)

        # Set bottom-right x in same units as output EPSG
        x_abs: num(required=False)

calibration_information_options:

    # Output posting in same units as output EPSG.
    output_posting:
        x_posting: num(min=0, required=False)
        y_posting: num(min=0, required=False)

processing_information_options:

    # Output posting in same units as output EPSG.
    output_posting:
        x_posting: num(min=0, required=False)
        y_posting: num(min=0, required=False)


geo2rdr_options:
    # Convergence threshold for geo2rdr algorithm
    threshold: num(min=0, required=False)

    # Maximum number of iterations
    maxiter: int(min=1, required=False)

logging_options:
    # Path to where to store log file
    path: str()

    # Log file write mode. 'a' for append to existing. 'w' for new or overwrite existing.
    write_mode: enum('a', 'w', required=False)

qa_options:
    # For descriptions of all QA parameters, see template runconfig (in `defaults` directory)
    workflows: include('workflows_options', required=False)
    validation: include('qa_validation_options', required=False)
    qa_reports: include('qa_reports_options', required=False)
    point_target_analyzer: include('point_target_analyzer_options', required=False)


workflows_options:
    validate: bool(required=False)
    qa_reports: bool(required=False)
    point_target_analyzer: bool(required=False)

qa_validation_options:
    metadata_cubes_fail_if_all_nan: bool(required=False)

qa_reports_options:
    backscatter_img:
        linear_units: bool(required=False)
        nlooks_freqa: list(int(min=1), min=2, max=2, required=False)
        nlooks_freqb: list(int(min=1), min=2, max=2, required=False)
        longest_side_max: int(min=1, required=False)
        percentile_for_clipping: list(num(min=0.0, max=100.0), min=2, max=2, required=False)
        gamma: num(min=0.0, required=False)
        nan_color_in_pdf: str(required=False)
        tile_shape: list(int(min=-1), min=2, max=2, required=False)
    histogram:
        decimation_ratio: list(int(min=1), min=2, max=2, required=False)
        backscatter_histogram_bin_edges_range: list(num(), min=2, max=2, required=False)
        phase_histogram_y_axis_range: list(any(num(), null()), min=2, max=2, required=False)
        phs_in_radians: bool(required=False)
        tile_shape: list(int(min=-1), min=2, max=2, required=False)

point_target_analyzer_options:
    nchip: int(min=1, required=False)
    upsample_factor: int(min=1, required=False)
    peak_find_domain: enum('time', 'frequency', required=False)
    num_sidelobes: int(min=2, required=False)

dem_download_options:
    # s3 bucket / curl URL / local file
    source: str(required=False)

    top_left:
        # Set top-left X coordinate
        x: num(required=False)

        # Set top-left Y coordinate
        y: num(required=False)

    bottom_right:
        # Set bottom-right X coordinate
        x: num(required=False)

        # Set bottom-right Y coordinate
        y: num(required=False)

pre_process_options:
    filter:
        A:
            type: str(required=False)
            parameters: str(required=False)
        B:
            type: str(required=False)
            parameters: str(required=False)

geocode_options:
    # Same as input DEM if not provided.
    output_epsg: int(min=1024, max=32767, required=False)

    # Output posting in same units as output EPSG.
    # If not provided, spacing values will be taken from provided DEM.
    output_posting:
        A:
            x_posting: num(min=0, required=False)
            y_posting: num(min=0, required=False)
        B:
            x_posting: num(min=0, required=False)
            y_posting: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    x_snap: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    y_snap: num(min=0, required=False)

    top_left:
        # Set top-left y in same units as output EPSG
        y_abs: num(required=False)

        # Set top-left x in same units as output EPSG
        x_abs: num(required=False)

    bottom_right:
        # Set bottom-right y in same units as output EPSG
        y_abs: num(required=False)

        # Set bottom-right x in same units as output EPSG
        x_abs: num(required=False)

ceos_analysis_ready_data_options:

    # Data access for the source data (URL or DOI)
    source_data_access: str(required=False)

    # Data access for the output product (URL or DOI)
    product_data_access: str(required=False)

    # Data access for the static layers product associated with the output product (URL or DOI)
    static_layers_data_access: str(required=False)

    # Estimated geometric accuracy (bias and standard deviation)
    # in meters in the X- and Y-directions over the coordinate
    # system defined by the product's EPSG code
    estimated_geometric_accuracy_bias_x: num(required=False)
    estimated_geometric_accuracy_bias_y: num(required=False)
    estimated_geometric_accuracy_standard_deviation_x: num(required=False)
    estimated_geometric_accuracy_standard_deviation_y: num(required=False)

# AMPCOR options for data-driven GSLC. Based on InSAR workflow runconfig
ampcor_options:
    # Lines per block to process in batch
    lines_per_block: int(min=1, required=False)

    # Number of columns for chip/template window in reference image
    window_range: int(min=16, max=512, required=False)

    # Number of lines for chip/template window in reference image
    window_azimuth: int(min=16, max=512, required=False)

    # Number of columns for search chip/template in secondary image
    half_search_range: int(min=4, max=128, required=False)

    # Number of lines for search chip/template in secondary image
    half_search_azimuth: int(min=4, max=128, required=False)

    # Number of columns to skip in reference image for next offset estimate
    skip_range: int(min=1, required=False)

    # Number of lines to skip in reference image for next offset estimate
    skip_azimuth: int(min=1, required=False)

    # Margin around image edges to avoid for offset computation
    margin: int(min=0, required=False)

    # Number of columns of output offset (covariance, snr)
    offset_width: int(required=False)

    # Number of lines of output offset (covariance, snr)
    offset_length: int(required=False)

    # Start pixel of the reference image along slant range
    start_pixel_range: int(min=0, required=False)

    # Start pixel of the reference image along azimuth
    start_pixel_azimuth: int(min=0, required=False)

    # Domain (frequency or spatial) where to compute cross-correlation
    cross_correlation_domain: enum('frequency', 'spatial', required=False)

    # Anti-aliasing oversampling factor to apply to reference/secondary SLC
    # prior to cross-correlation computation
    slc_oversampling_factor: int(min=2, max=5, required=False)

    # Deramp data prior to FFT: magnitude or complex (linear phase ramp)
    deramping_method: enum('magnitude', 'complex', required=False)

    # Square zoom window size for cross-correlation statistics (SNR, covariance)
    correlation_statistics_zoom: int(required=False)

    # Square zoom window size for sub-pixel offset refinement
    correlation_surface_zoom: int(min=4, required=False)

    # Oversampling factor of the correlation surface for sub-pixel offset refinement
    correlation_surface_oversampling_factor: int(min=2, max=128, required=False)

    # Correlation surface oversampling algorithm
    correlation_surface_oversampling_method: enum('sinc', 'fft', required=False)

    # Number of cuda streams
    cuda_streams: int(required=False)

    # Number of offset estimates to process in batch along slant range
    windows_batch_range: int(min=1, required=False)

    # Number of offset estimates to process in batch along azimuth
    windows_batch_azimuth: int(min=1, required=False)

worker_options:
    # To prevent downloading DEM / other data automatically. Default True
    internet_access: bool(required=False)

    # Enable/Disable GPU processing capabilities. Default False
    gpu_enabled: bool(required=False)

    # Index of the GPU to use for processing, optional. Defaults to the
    # first available CUDA device. Ignored if *gpu_enabled* is False.
    gpu_id: int(min=0, required=False)

output_options:
    # Data type of GSLC raster (default complex64_zero_mantissa)
    data_type: enum('complex32', 'complex64', 'complex64_zero_mantissa', required=False)

    # Enable/disable gzip compression of GSLC raster (default True)
    compression_enabled: bool(required=False)

    # Level of compression applied to GSLC raster (default 4)
    # 1 - least compression, 9 - best compression
    compression_level: int(min=1, max=9, required=False)

    # Chunk size of GSLC raster (default [128, 128])
    chunk_size: list(int(min=4), min=2, max=2, required=False)

    # File space management strategy.
    fs_strategy: enum("fsm", "page", "aggregate", "none", required=False)

    # File space page size in bytes. Relevant only when `fs_strategy == "page"`
    fs_page_size: int(min=1, required=False)

    # Enable/disable shuffle filtering of GSLC raster (default True)
    shuffle: bool(required=False)

lut_options:
    # Boolean flag to activate/deactivate model-based solid earth tide corrections
    solid_earth_tides_enabled: bool(required=False)
